# src/crypto_trading_bot/scripts/run_learning_analysis.py

"""
Run Learning Analysis
Executes the LearningMachine to analyze past trades,
then saves the report to JSON and CSV under /reports.
"""

import csv
import json
import logging
import os

from crypto_trading_bot.learning.learning_machine import LearningMachine

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

REPORTS_DIR = "reports"
JSON_PATH = os.path.join(REPORTS_DIR, "learning_report.json")
CSV_PATH = os.path.join(REPORTS_DIR, "learning_report.csv")


def save_report(report: dict) -> None:
    """
    Save the learning report to both JSON and CSV files.

    Args:
        report (dict): The report dictionary generated by LearningMachine.
    """
    os.makedirs(REPORTS_DIR, exist_ok=True)

    # Save JSON
    with open(JSON_PATH, "w", encoding="utf-8") as f:
        json.dump(report, f, indent=4)
    logger.info("Report saved to %s", JSON_PATH)

    # Save CSV
    with open(CSV_PATH, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["metric", "value"])
        for key, value in report.items():
            writer.writerow([key, value])
    logger.info("Report saved to %s", CSV_PATH)


def main():
    """
    Run the LearningMachine analysis and save results.
    """
    logger.info("Running learning analysis...")
    lm = LearningMachine()
    report = lm.generate_report()

    logger.info("Learning Analysis Report:")
    for key, value in report.items():
        logger.info("  %s: %s", key, value)

    save_report(report)
    logger.info("Analysis complete and exported.")


if __name__ == "__main__":
    main()
